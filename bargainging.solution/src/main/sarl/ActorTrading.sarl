import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.ExternalContextAccess
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Logging
import io.sarl.core.Schedules
import java.util.ArrayList
import java.util.LinkedHashMap
import java.util.List
import java.util.TreeMap
import java.util.UUID

agent Trader extends BaseActor {

	uses Lifecycle, Schedules, DefaultContextInteractions, Behaviors, Logging, ExternalContextAccess

	var numBargainRounds = 0
	var sortedUtilsByBuyer : LinkedHashMap<UUID, TreeMap<UUID, Double>> = newLinkedHashMap()

	// Event-Handling
	on Initialize {
		// Event trigger before the agent begin to live or to be used.
		// You should put all the initialization statements in this block of code.
		synchronized (this) {
			^space = defaultContext.getSpace(occurrence.parameters.get(0) as UUID)
			^space.register(asEventListener())
			this.tradingId = occurrence.parameters.get(1) as UUID
			this.me = occurrence.parameters.get(2) as ActorPersonality
			this.toleranceToReachMaxOwnUtil = me.getBaseTolerance()
			this.toleranceToReachMaxGenUtil = me.getBaseTolerance()
			loggingName = me.getName()
			info("The Actor " + me.getName() + " was started.")
		}
	}

	on Inquiry [occurrence.id == this.tradingId] {
		info("Trader: " + this.tradingId + "  " + me.getName() + " init Round")
		playersList = occurrence.buyersList
		for (buyer : playersList.keySet()) {
			sortedUtilsByBuyer.put(buyer, Utils.getSortedUtilsForOpponent(me.getUtilsByBuyer(buyer)))
			var highestPersonalUtil : LinkedHashMap<String, Object> = me.getUtilByActorIdAndUtilId(buyer,
				sortedUtilsByBuyer.get(buyer).lastKey())
			var tradeItems : List<String> = highestPersonalUtil.get("tradeItems") as ArrayList
			var offerItems : List<String> = highestPersonalUtil.get("offerItems") as ArrayList
			var myOffer : Offer = buildOffer(this.tradingId, tradeItems, buyer, offerItems, 0.0, me.name, null)
			myOffer.setTraderTrustScore(me.getTrustScore())
			^space.emit(new MakeOffer(myOffer))

		}

	}

	on MakeOffer [!isFromMe] {
		var offer = occurrence.offer
		if (offer.getTraderId() == this.tradingId) {
			checkOffer(offer)
		}
	}

	on InitPlay [occurrence.offer.getTraderId() == this.tradingId] {
		^space.emit(new Play(occurrence.offer, me, me.playStrat(occurrence.offer.getClientId()), me.getRole()))
	}

	on Notify [occurrence.resultMap.get("Trader").get("id") == this.tradingId] {
		var id = occurrence.resultMap.get("Buyer").get("id") as UUID
		var result = occurrence.resultMap.get("Buyer").get("result") as Boolean
		me.setPlayerBeavhiour(id, result)
	}

	on TransportGoods [occurrence.resultMap.get("id") == this.tradingId] {
		var items = occurrence.resultMap.get("items") as List
		var utils = occurrence.resultMap.get("utils") as LinkedHashMap
		me.setItems(items)
		me.setMyUtils(utils)
	}

	on Clean {
		// TODO
		sortedUtilsByBuyer = newLinkedHashMap
		numBargainRounds = 0
		resetTolerances()
	}

	on CleanBatch {
	}

	on Die {
		info("Stopping")
		killMe
	}

	// Functions
	def checkOffer(offer : Offer) {

		if (offer !== null) {
			var util : LinkedHashMap<String, Double> = Utils.calcUtilForOffer(offer)
			// info(util)
			// Calculate the Square root from the gen Util/ Nash product to get near to the optimal nash solution
			var minAccept = Math.sqrt(util.get("genUtil"))
			minAccept = minAccept * toleranceToReachMaxOwnUtil
			// info("Minimum Util: " + minAccept + " My Util: " + util.get("utilTrader") + " Max util: " + Utils.getMaxUtil(offer))
			if (util.get("utilTrader") >= minAccept &&
				util.get("genUtil") >= (Utils.getMaxUtil(offer) * toleranceToReachMaxGenUtil)) {
				info("Accept Offer: " + offer)
				^space.emit(new AcceptOffer(offer))
			} else {
				evaluateCounterOffer(offer)
			}
		} else {
			evaluateCounterOffer(offer)
		}
	}

	def evaluateCounterOffer(oldOffer : Offer) {
		synchronized (lockObj) {
			var buyer = oldOffer.getClientId()
			var amount = 0.0
			var items : List<String> = null
			if (numBargainRounds >= 7 || oldOffer.getBuyerTrustScore() < 35.0) {
				info(oldOffer.getNumBargainRounds())
				info("Reject!")
				^space.emit(new Reject(oldOffer))

			} else {
				if (sortedUtilsByBuyer.get(buyer) === null) {
					sortedUtilsByBuyer.put(buyer, Utils.getSortedUtilsForOpponent(me.getUtilsByBuyer(buyer)))
					if (sortedUtilsByBuyer.size() <= 0) {
						^space.emit(new Reject(oldOffer))
					}
					var highestPersonalUtil : LinkedHashMap<String, Object> = me.getUtilByActorIdAndUtilId(buyer,
						sortedUtilsByBuyer.get(buyer).lastKey())
					var tradeItems : List<String> = highestPersonalUtil.get("tradeItems") as ArrayList
					var offerItems : List<String> = highestPersonalUtil.get("offerItems") as ArrayList
					var myOffer : Offer = buildNewOffer(oldOffer, tradeItems, offerItems, 0.0)
					^space.emit(new MakeOffer(myOffer))
				} else {
					if (sortedUtilsByBuyer.get(buyer).keySet().size() > 0) {
						sortedUtilsByBuyer.get(buyer).remove(sortedUtilsByBuyer.get(buyer).lastKey())
					}
					if (sortedUtilsByBuyer.get(buyer).size() == 0) {
						lowerTolerances(me.getToleranceChangeRate() * (oldOffer.getTraderTrustScore() / 100))
						sortedUtilsByBuyer.remove(buyer)
						numBargainRounds++
						info(numBargainRounds)
						in(200) [
							evaluateCounterOffer(oldOffer)
						]
					} else {
						var highestPersonalUtil : LinkedHashMap<String, Object> = me.getUtilsByBuyer(buyer).get(
							sortedUtilsByBuyer.get(buyer).lastKey())
						var tradeItems : List<String> = highestPersonalUtil.get("tradeItems") as ArrayList
						var offerItems : List<String> = highestPersonalUtil.get("offerItems") as ArrayList
						var myOffer : Offer = buildNewOffer(oldOffer, tradeItems, offerItems, 0.0)
						^space.emit(new MakeOffer(myOffer))
					}

				}
			}

		}
	}

}
